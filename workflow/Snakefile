# Main entrypoint of the workflow.
# Please change the rule all to to your needs (blast or sintax or both, 97 or 99% similarity, etc.)
# You can get both sintax and blast annotation by adding the corresponding output in the rule all.
import os
import re
from snakemake.utils import min_version

min_version("7.18.2")

configfile: "config/config.yaml"

# Define the function to list samples
def get_samples():
    sample_path = config['input_dir']
    samples = []
    if os.path.isdir(sample_path):
        subdirs = [d for d in os.listdir(sample_path) if os.path.isdir(os.path.join(sample_path, d))]
        if subdirs:
            samples = subdirs
        else:
            files = [f for f in os.listdir(sample_path) if os.path.isfile(os.path.join(sample_path, f))]
            for file in files:
                # Handle files with multiple extensions
                file_base = re.sub(r'\.fastq(\.gz)?$', '', file)
                if file_base not in samples:
                    samples.append(file_base)
    return samples


include: "rules/01-concatenate_fastq.smk"
include: "rules/02-filtering.smk"
include: "rules/03-clustering.smk"
include: "rules/04-mapping.smk"
include: "rules/05-polish_racon.smk"
include: "rules/06-relabel.smk"
include: "rules/07-clustering_identity.smk"
include: "rules/08-taxonomy.smk"
include: "rules/09-fix_otu_table.smk"
include: "rules/10-prep_for_ampvis2.smk" # <- shouldn't be necessary, amp_load() reads sintax files directly, see "taxonomy" here https://kasperskytte.github.io/ampvis2/reference/amp_load.html#arguments-1
include: "rules/11-prep_for_phyloseq.smk"

# Prepare inputs for rule all
## Rule all currently outputs all file formats. You can change this to only output the files you need.
## For example you can remove the blast files if you only need sintax annotation. By default, both sintax and blast files are output.
## You can also change the similarity level to any% by changing the id to the desired % in the expand function.
## You can comment out the files you don't need in the expand function.
def prepare_inputs():
    inputs = []
    ids = ["97", "99"]
    if config["include_sintax_output"]:
        inputs.extend(expand(os.path.join(config['output_dir'], "final", "{id}", "OTUtable_tax_{id}_sintax.tsv"), id=ids))
        inputs.extend(expand(os.path.join(config['output_dir'], "final", "{id}", "phyloseq_tax_{id}_sintax.tsv"), id=ids))
        inputs.extend(expand(os.path.join(config['output_dir'], "final", "{id}", "phyloseq_abundance_{id}_sintax.tsv"), id=ids))

    if config["include_blast_output"]:
        inputs.extend(expand(os.path.join(config['output_dir'], "final", "{id}", "OTUtable_tax_{id}_blast.tsv"), id=ids))
        inputs.extend(expand(os.path.join(config['output_dir'], "final", "{id}", "phyloseq_tax_{id}_blast.tsv"), id=ids))
        inputs.extend(expand(os.path.join(config['output_dir'], "final", "{id}", "phyloseq_abundance_{id}_blast.tsv"), id=ids))
    
    inputs.append(expand(os.path.join(config['output_dir'], "final", "report", "total_reads.tsv")))

    return inputs

rule all:
    input:
        prepare_inputs()

